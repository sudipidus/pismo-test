// Code generated by MockGen. DO NOT EDIT.
// Source: PismoService.go
//
// Generated by this command:
//
//	mockgen -source=PismoService.go -destination=./mock_services/mock_pismo_service.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPismoService is a mock of PismoService interface.
type MockPismoService struct {
	ctrl     *gomock.Controller
	recorder *MockPismoServiceMockRecorder
}

// MockPismoServiceMockRecorder is the mock recorder for MockPismoService.
type MockPismoServiceMockRecorder struct {
	mock *MockPismoService
}

// NewMockPismoService creates a new mock instance.
func NewMockPismoService(ctrl *gomock.Controller) *MockPismoService {
	mock := &MockPismoService{ctrl: ctrl}
	mock.recorder = &MockPismoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPismoService) EXPECT() *MockPismoServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockPismoService) CreateAccount(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockPismoServiceMockRecorder) CreateAccount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockPismoService)(nil).CreateAccount), ctx)
}

// CreateTransaction mocks base method.
func (m *MockPismoService) CreateTransaction(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockPismoServiceMockRecorder) CreateTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockPismoService)(nil).CreateTransaction), ctx)
}

// FetchAccount mocks base method.
func (m *MockPismoService) FetchAccount(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccount", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// FetchAccount indicates an expected call of FetchAccount.
func (mr *MockPismoServiceMockRecorder) FetchAccount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccount", reflect.TypeOf((*MockPismoService)(nil).FetchAccount), ctx)
}

// Greet mocks base method.
func (m *MockPismoService) Greet(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greet", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Greet indicates an expected call of Greet.
func (mr *MockPismoServiceMockRecorder) Greet(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greet", reflect.TypeOf((*MockPismoService)(nil).Greet), ctx)
}
